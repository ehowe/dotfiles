" vim ftw
set nocompatible

" modelines
set modelines=5

" Load vim-plug
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')
Plug 'AndrewRadev/splitjoin.vim'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'Sirver/ultisnips'
Plug 'bling/vim-airline'
Plug 'depuracao/vim-rdoc'
Plug 'derekwyatt/vim-scala'
Plug 'elixir-lang/vim-elixir'
Plug 'fatih/vim-go'
Plug 'fishbullet/deoplete-ruby'
Plug 'honza/vim-snippets'
Plug 'jlanzarotta/bufexplorer'
Plug 'jremmen/vim-ripgrep'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'kien/ctrlp.vim'
Plug 'leafgarland/typescript-vim'
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'mattn/gist-vim'
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
Plug 'noprompt/vim-yardoc'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'slack/vim-l9'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-pathogen'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vividchalk'
Plug 'vim-airline/vim-airline'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/xorium.vim'
Plug 'w0rp/ale'
Plug 'yuezk/vim-js'
call plug#end()

let g:ale_set_highlights = 0
let g:ale_fix_on_save = 1
let g:ale_linters = {
\'javascript': ['flow', 'eslint'],
\}


let g:ale_fixers = {
\'javascript': ['eslint'],
\}

if exists("g:gui_oni")
  set number
  set noswapfile
  set smartcase
  
  " Enable GUI mouse behavior
  set mouse=a

  au VimEnter * NERDTree
endif

" set the title in xterm
set title

" better buffer management
set hidden

" fixup backspace behavior
set backspace=indent,eol,start

let mapleader = ","
set history=1000

" searching stuff
set hlsearch
set incsearch

" Make <C-L> clear highlight and redraw
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

" ignore case only if there are no upcase letters in the search
set ignorecase
set smartcase

" <tab> completion for filenames
set wildmenu
set wildmode=list:longest
set complete-=i

" turn syntax highlighting on
syntax on

" 256 colors, colorscheme
set t_Co=256
colorscheme solarized8
set vb t_vb=

filetype plugin indent on
set ruler

" Trailling spaces and tabs
set list
set listchars=tab:>-,trail:*,nbsp:*

set fileformat=unix
set nobackup

" Status Line
set statusline=%F%m%r%h%w\ [f:%{&ff}\ t:%Y]\ [A:\%03.3b\ H:\%02.2B]\ [P:%04l,%04v][%p%%]\ [LEN=%L]\ %{fugitive#statusline()}
set laststatus=2

" use bash so that rvm works
set shell=bash

xmap ga :EasyAlign

" NT bindings
map <leader>n :NERDTreeToggle<CR>
map <leader>ntm :NERDTreeMirror<CR>
map <leader>ntc :NERDTreeClose<CR>
map <leader>ntf :NERDTreeFind<CR>

:map <leader>a :Rg

" disable ex mode
:map Q <Nop>

" disable ri check
:map K <Nop>

" Align bindings
"map <leader>a= to :Align = (rather than :Align := )
map <leader>ah :EasyAlign =><CR>
map <leader>a# :EasyAlign #<CR>
map <leader>a{ :EasyAlign {<CR>
map <leader>a: :EasyAlign :<CR>
map <leader>A :EasyAlign [A-Z].*<CR>:'<,'>s/\s*$//<CR><C-l>
map <leader>= ggVG=<CR>
map <leader>ct :set et <bar> retab<CR>

" Helpers
map <leader>rts %s/\v\s+$//g<CR>
map <leader>srt :!sort<CR>

" Ruby
map <leader>r19 :s/\v:([0-9a-z_]+)\s+\=\>\s+/\1: /g<CR>
map <leader>r18 :s/\v([0-9a-z_"']+):\s+(.*)/:\1 => \2/g<CR>

" Haml
map <leader>hs :!haml -c %:p<CR>

" Set minimum window height
set winheight=10

" ctags stuff
set tags=./tags,tags,./TAGS,TAGS

" numbers
set number

" gui stuff
set guioptions-=T
set guioptions-=r
set guioptions-=L

" Movement
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
nnoremap <A-s> <C-w>s
nnoremap <A-q> <C-w>q

let $FZF_DEFAULT_COMMAND = 'rg --files --no-ignore --hidden --follow --glob "!.git/*" --glob "!node_modules/*" --glob "!dist/*" --glob "!tmp/*" --glob "!log/*" --glob "!private/*"'
let g:rg_command = 'rg --files'
"set wildignore+=*/tmp/**,*.scssc,*.sassc,*compiled*
"let g:ctrlp_custom_ignore = '.*\(node_modules\|build\|bower_components\).*'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.log,.git,*/bundle/*,*/node_modules/*
"let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|node_modules'
map <leader>f :FZF<CR>

" fuckups
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Wa ((getcmdtype() is# ':' && getcmdline() is# 'Wa')?('wa'):('Wa'))
cnoreabbrev <expr> Wqa ((getcmdtype() is# ':' && getcmdline() is# 'Wqa')?('wqa'):('Wqa'))
cnoreabbrev <expr> E ((getcmdtype() is# ':' && getcmdline() is# 'E')?('e'):('E'))

" zsh and vim don't get along
set shell=bash

" Save files when vim loses focus
au FocusLost * :wa

" tabs are spaces
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set cursorline

" remove trailing whitespace automatically
autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :%s/\s\+$//e
au BufRead,BufNewFile *.mote set filetype=html

" retab on write
autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :set et | retab

" UltiSnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsListSnippets = "<c-l>"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:rg_command = "/usr/local/bin/rg --vimgrep -S"
