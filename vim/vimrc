" vim ftw
set nocompatible

" modelines
set modelines=5

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim.git'
Plugin 'jlanzarotta/bufexplorer.git'
Plugin 'kien/ctrlp.vim.git'
Plugin 'mattn/gist-vim.git'
Plugin 'scrooloose/nerdcommenter.git'
Plugin 'scrooloose/nerdtree.git'
Plugin 'msanders/snipmate.vim.git'
Plugin 'AndrewRadev/splitjoin.vim.git'
Plugin 'scrooloose/syntastic.git'
Plugin 'leafgarland/typescript-vim.git'
Plugin 'elixir-lang/vim-elixir'
Plugin 'tpope/vim-fugitive.git'
Plugin 'fatih/vim-go.git'
Plugin 'tpope/vim-haml.git'
Plugin 'mxw/vim-jsx'
Plugin 'slack/vim-l9.git'
Plugin 'tpope/vim-markdown.git'
Plugin 'tpope/vim-rails.git'
Plugin 'depuracao/vim-rdoc.git'
Plugin 'tpope/vim-repeat.git'
Plugin 'vim-ruby/vim-ruby.git'
Plugin 'derekwyatt/vim-scala.git'
Plugin 'tpope/vim-surround.git'
Plugin 'tpope/vim-vividchalk.git'
Plugin 'noprompt/vim-yardoc.git'
Plugin 'vim-scripts/xorium.vim.git'
Plugin 'rafi/awesome-vim-colorschemes'
Plugin 'junegunn/vim-easy-align'
Plugin 'jremmen/vim-ripgrep'
call vundle#end()

" pathogen.vim ftw
filetype off
call pathogen#incubate()
call pathogen#helptags()
execute pathogen#infect()

" set the title in xterm
set title

" better buffer management
set hidden

" fixup backspace behavior
set backspace=indent,eol,start

let mapleader = ","
set history=1000

" searching stuff
set hlsearch
set incsearch

" Make <C-L> clear highlight and redraw
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

" ignore case only if there are no upcase letters in the search
set ignorecase
set smartcase

" <tab> completion for filenames
set wildmenu
set wildmode=list:longest
set complete-=i

" turn syntax highlighting on
syntax on

" 256 colors, colorscheme
set t_Co=256
colorscheme onedark
set vb t_vb=

filetype plugin indent on
set ruler

" Trailling spaces and tabs
set list
set listchars=tab:>-,trail:*,nbsp:*

set fileformat=unix
set nobackup

" Status Line
set statusline=%F%m%r%h%w\ [f:%{&ff}\ t:%Y]\ [A:\%03.3b\ H:\%02.2B]\ [P:%04l,%04v][%p%%]\ [LEN=%L]\ %{fugitive#statusline()}
set laststatus=2

" use bash so that rvm works
set shell=bash

xmap ga :EasyAlign

" NT bindings
map <leader>n :NERDTreeToggle<CR>
map <leader>ntm :NERDTreeMirror<CR>
map <leader>ntc :NERDTreeClose<CR>
map <leader>ntf :NERDTreeFind<CR>

" disable ex mode
:map Q <Nop>

" disable ri check
:map K <Nop>

" Align bindings
"map <leader>a= to :Align = (rather than :Align := )
map <leader>ah :EasyAlign =><CR>
map <leader>a# :EasyAlign #<CR>
map <leader>a{ :EasyAlign {<CR>
map <leader>a: :EasyAlign :<CR>
map <leader>A :EasyAlign [A-Z].*<CR>:'<,'>s/\s*$//<CR><C-l>
map <leader>= ggVG=<CR>
map <leader>ct :set et <bar> retab<CR>

" Helpers
map <leader>rts %s/\v\s+$//g<CR>
map <leader>srt :!sort<CR>

" Ruby
map <leader>rs :!ruby -c %:p<CR>
map <leader>r19 :s/\v:([0-9a-z_]+)\s+\=\>\s+/\1: /g<CR>
map <leader>r18 :s/\v([0-9a-z_"']+):\s+(.*)/:\1 => \2/g<CR>

" Haml
map <leader>hs :!haml -c %:p<CR>

" Set minimum window height
set winheight=10

" ctags stuff
set tags=./tags,tags,./TAGS,TAGS

" numbers
set number

" gui stuff
set guioptions-=T
set guioptions-=r
set guioptions-=L

" Movement
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
nnoremap <A-s> <C-w>s
nnoremap <A-q> <C-w>q

" grep
map <leader>a :Rg<space>
map <leader>a* :Rg<space><cword><CR>


" ctrlp
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif
"set wildignore+=*/tmp/**,*.scssc,*.sassc,*compiled*
"let g:ctrlp_custom_ignore = '.*\(node_modules\|build\|bower_components\).*'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.log,.git,*/bundle/*,*/node_modules/*
"let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|node_modules'
map <leader>f :CtrlP<CR>
map <leader>g :CtrlPBuffer<CR>
map <leader>cf :CtrlPClearCache<CR>

" fuckups
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Wa ((getcmdtype() is# ':' && getcmdline() is# 'Wa')?('wa'):('Wa'))
cnoreabbrev <expr> Wqa ((getcmdtype() is# ':' && getcmdline() is# 'Wqa')?('wqa'):('Wqa'))
cnoreabbrev <expr> E ((getcmdtype() is# ':' && getcmdline() is# 'E')?('e'):('E'))

" zsh and vim don't get along
set shell=bash

" Save files when vim loses focus
au FocusLost * :wa

" tabs are spaces
set tabstop=2
set smarttab
set shiftwidth=2
set autoindent
set expandtab
set cursorline

" remove trailing whitespace automatically
autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :%s/\s\+$//e
au BufRead,BufNewFile *.mote set filetype=html

" retab on write
autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :set et | retab
